//Home Assignment 1.1

The LEDs are connected to Port B. The address to the output register is as shown in Table 1.2.
Using a pointer to the address, how do you turn LED number 3 (only) on?

0x23 PINB // state of port if input
0x24 DDRB // data direction 
0x25 PORTB // state of port if output 

• Set the data direction register to 0x01 (hexadecimal) or 0b00000001 (binary).
• Set the pin PB0 to high by writing 0x01 or 0b00000001 to the port register. 

int *ledInit = 0x24; // set pointer to address of DDRB
int *ledData = 0x25; // set pointer to address of PORTB

*ledInit |= 0b00000100 // set data direction to output for led3
*ledData |= 0b00000100 // set IO to high for led3 

 //Home Assignment 1.2

The buttons are connected to Port A. The address to the input register is as shown in Table 1.2.
Using a pointer to the address, how do you read the value of (only) button 4?

0x20 PINA
0x21 DDRA
0x22 PORTA

int *buttonInit = 0x21; // set pointer to address of DDRA
int *buttonData = 0x20; // set pointer to address of PINA 

*buttonInit  |= 0b00000000; // set data direction to input 
*buttonData |= 0b001000; // set io to high for button 4

// Home Assignment 1.3

When pressing a mechanical button, do you get a perfectly clean signal? If no, how do we
handle such situations?

No, we don't! An approach is to sample the switch signal at a regular interval and filter out all glitches. 

// Home Assignment 1.4 

Setup a variable to act as a shift register, initialise it to xFF.
  Setup a regular sampling event, perhaps using a timer. Use a period of about 1ms.

Setup a variable to act as a shift register, initialise it to xFF.
Setup a regular sampling event, perhaps using a timer. Use a period of about 1ms.

On a sample event:
    Shift the variable towards the most significant bit
    Set the least significant bit to the current switch value
     if shift register val=0 then
      Set internal switch state to pressed
    else
      Set internal switch state to released
   end if

//Home Assignment 2.1

How do you enable the transmitter and receiver for USART0?

In order to set up the transmitter and receiver the RXEN and TXEN bits need to be set!

UCSR0B |= 0b00011000; // sets the RXEN and TXEN bits to 1 

UCSR0B = (1<<RXEN0)|(1<<TXEN0); // shifting in a one to the place of the correct bit. 


//Home Assignment 2.2

How do you set the data length to 8 bits and 1 stop bit for USART0?

UCSR0C |= 0b00000011;

UCSR0C = (0<<USBS0)|(3<<UCSZ00); 

//Home Assignment 2.3

How do you set the baud rate for USART0? You are free to choose any applicable value.

UBRR0H = (68 >> 8);
UBRR0L = 68;

//Home Assignment 2.4

How do you read the received data from the USART0? Remember that you need to wait until
there is data to read.

First, check whether the RXC0-flag in the USCSR0A is set to 1, indicating that there is data to read in the buffer. 
Then read all the data from the buffer and return it! 

unsigned char USART_Receive( void )

{
 /* Wait for data to be received */
 while ( !(UCSR0A & (1<<RXC0)) )
;
/* Get and return received data from buffer */
 return UDR0;
}


//Home Assignment 2.5

How do you transmit data via USART0?

Check whether the transmit buffer is ready to recieve new data by checking the UDRE0 flag. If this flag is set to 1, the buffer
is empty and is ready to be written to. Then put the data in the buffer, which then transmits it! 

void USART_Transmit( unsigned char data )
{
 /* Wait for empty transmit buffer */
 while ( !( UCSR0A & (1<<UDRE0)) )
 ;
 /* Put data into buffer, sends the data */
 UDR0 = data;
}

//Home Assignment 2.6

Develop a simple protocol that can be used to turn one or several LED’s, connected to PORTB,
on or off. There should be 8 bytes of data, that is, one byte per LED. 

Header       Trailer    LedOn       LedOff
11110000     00001111   11111111    00000000 



//Home Assignment 3.1

How do you configure Timer 3 to generate a Fast PWM signal? Look at TCCR3A and TCCR3B
register in the datasheet. 

The bits should be set so that
the OC3A or OC3B pin gets cleared on a compare match. 

TCCR3A = (1 << COM3A1)|(0 << COM3A0)
TCCR3B = (1 << COM3B1)|(0 << COM3B0)

//Home Assignment 3.2

How do you configure Timer 3 to use a prescaler value of 1024? Look at the description of
TCCR3B register in the datasheet.

TCCR3B = (1 << CS32)|(0 << CS31)|(1 << CS30);

//Home Assignment 3.3

How can Pin PB6 in Port B be configured to be an output? This pin is connected to the timer’s
output compare logic which generates the PWM signal.

PORTB = (1 << PB6);
DDRB = (1 << DDB6);

//Home Assignment 4.1

How do you enable the ADC?

ADCSRA = (1 << ADEN); 

//Home Assignment 4.2

In order to get reliable conversion, the frequency of the ADC should lie between 50kHz and
200kHz. How do you configure the prescaler to meet this requirement?

ADCSRA = (7 << ADPS0); // vad är skillnaden mellan 0, 1 och 2 i registernamnet?     

//Home Assignment 4.3

The left and right potentiometers are connected to Channel 0 and 1, respectively. How do you
configure the ADC to select one of these two? (Hint x 2! Check the schematic to see where the
potentiometers are connected. Also, the ADC should in Single Ended Input configuration.)

ADMUX = (0 << MUX4)|(0 << MUX3)|(0 << MUX2)|(0 << MUX1)|(0 << MUX0); 

//Home Assignment 4.4

How do you configure the ADC to have AVCC as the reference voltage?

ADMUX = (0 << REFS1)|(1 << REFS0);

//Home Assignment 4.5

How do you start a conversion and read the converted signal from the ADC? Remember that
you need to wait until the conversion is done

PRR0 = (0 << PRADC);
ADCSRA = (1 << ADSC); 

//Home Assignment 5.1

How long does it take for the sound to travel to an obstacle at 0.5m (and back!)? Assume that
the sound travels 340m/s.

//Home Assignment 5.2

Using timer/counter 1, what is the best prescaler value? Hint! The goal is to take advantage
of the timer/counter resolution.

//Home Assignment 5.3

    Assume the timer value TCNT1 is 13337, how far away is the obstacle?








